Kevin Woodward
keawoodw@ucsc.edu
CSE250A
Final Project

This documentation provides an overview of the included code and developement information.

The entirety of this project was developed on macOS 10.14 using ns-3 version 3.30.1, stable release.

~~~~~~~~~~~Applying source code changes~~~~~~~~~~~

From a fresh install of this version of ns-3, the following files in the source code must be replaced with the included files (in the sourcecode/ folder) where my work was done.
The relative path of these files is rooted at ns-3.30.1/ (the folder containing scratch/, src/, etc).

	Included file: rtt-estimator.cc
	Where to replace: ./src/internet/model/rtt-estimator.cc

	Included file: rtt-estimator.h
	Where to replace: ./src/internet/model/rtt-estimator.h

	Included file: rtt-test.cc
	Where to replace: ./src/internet/test/rtt-test.cc


~~~~~~~~~~~~Running ns-3 scripts~~~~~~~~~~~~~~

There are 4 included script files (scenario[1-4].cc, located in ns3scripts/ folder), which can be placed inside the ./scratch folder for running.
These can be ran with the following command, assuming you are at the ns-3.30.1/ directory:

	NS_LOG="RttEstimator::RttFixedShare" ./waf --run scratch/scenario[1-4] -p &> s[1-4]log.txt

Replace [1-4] with 1, 2, 3, or 4.

The NS_LOG environment variable only allows logs from the specified class to print, which is necessary for data parsing.
Note that stdout and stderr are both piped to a file named s[1-4]log.txt. This is used by a Python3 script later.

Running this command also produces a file named s[1-4].flowmon, as well as a file named s[1-4].cwnd.
Both of these files are also parsed by Python3 scripts later. 

NOTE: Scenario 4 does not produce a .cwnd trace file due to implementation difficulties and lack of time. 

NOTE: 	If a s[1-3].cwnd file exists, it must be deleted or emptied before running the same number scenario again.
	Since all flows trace point to the same file, it must be opened in append mode, which will not overwrite in the
	event that two identical scenarios are ran without deleting the file in between. I suggest prepending a delete
	operation to the run command. For example:

		rm s[1-3].cwnd; NS_LOG="RttEstimator::RttFixedShare" ./waf --run scratch/scenario[1-3] -p &> s[1-3]log.txt

NOTE: To modify the number of nodes, flows, speed, etc. you must modify the source code of the scenario[1-4].cc files. The location
of each parameter of interest is documented as comments in the script source codes.

~~~~~~~~~~~~Running Python3 parsing scripts~~~~~~~~~~~~

These scripts were written using Python3 version 3.7.3 and located in the pythonscripts/ folder.

These Python3 scripts rely on the following packages:

	os (included in Python3)
	re (included in Python3)
	xml.etree.ElementTree (included in Python3)

Each of these scripts must be modified to point at the output files generated by the ns-3 scripts.

This path is named pathstr in each script, and an example is shown within the .py files.

These scripts only parse one file at a time, so the workflow for gathering results looks like:

	1) Run a simulation.
	2) If necessary modify pathstr in each Python3 script to point at output files from ns-3.
	3) Run each Python3 script and record the data. (I used a spreadsheet).

~~~~~~~~~~~~~Misc~~~~~~~~~~~

IMPORTANT: If you attempt to run scenario 1 through 3 with a higher amount of flows or scenario 4 at all, you will likely 
run into an ASSERT FAILED located in tcp-tx-buffer.cc. I believe this is an ns-3 bug documented here as unresolved:
	
	https://www.nsnam.org/bugzilla/show_bug.cgi?id=2944

I don't believe this is an issue with my code or scenario scripts, but a bug in ns-3 that I am triggering somehow.
I simply just had to work around this by discarding simulation results that crashed and rerunning the crashed simulation.
For a high number of flows and for all of scenario 4, this was more than 50% of runs, which makes collecting data tedious.

Yes, I know I could have automated the running of the simulations and gathering data, but I wanted to be able
to test and modify things as I was collecting it. By the time I was comfortable with my code, I had gathered 
a lot of data anyways and decided to just keep doing what I was doing.

If anyone reading this has questions about my code or if you want a further explanation on anything, 
feel free to email me using my email at the top of this document.

Thanks for reading :)
